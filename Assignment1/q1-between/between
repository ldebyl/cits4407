#!/bin/bash
###############################################################################
# Returns the number of days between two dates.                               
# 
# See man ./between.1 or between.1.txt for more information.
# 
# Author:  Lee de Byl <10306807@student.uwa.edu.au>
# Created: 13/04/2020
##############################################################################

# Enable error trapping - stops execution if a non-zero return code occurs
# in the script.
set -e

# Define the number of seconds in a day, used to convert the epoch returned
# by date to the number of days.
let seconds_per_day=60*60*24

# Function format_date
# Converts a date in dd/mm/yyyy format to yyyy-mm-dd, as required
# by the date command.
format_date() {
  echo $1 | sed -E 's,^([0-9]{2})/([0-9]{2})/([0-9]{4})$,\3-\2-\1,g'
}

# Function date_to_epoch
# Converts a date string, using format_date(), to a UNIX epoch.
date_to_epoch() {
  date -d "$(format_date "$1")" +%s
}

# Check the number of parameters - returns 1 if the number of
# parameters is incorrect.
if [ "$#" -ne 2 ]; then
  echo "Illegal number of parameters">&2
  exit 1
fi

# Convert the two dates to UNIX Epochs.
# This is performed across three lines so that a failure in date conversion
# correctly terminates the script.
d1=`date_to_epoch "$1"`
d2=`date_to_epoch "$2"`
echo $((($d1 - $d2) / $seconds_per_day)) | tr -d -
